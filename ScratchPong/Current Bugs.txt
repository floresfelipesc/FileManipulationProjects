--When the Ball bounces off of the paddle, it increases in speed but then slows down after colliding with a wall
Fixed
--When the ball gets too fast, it can phase through the walls of the game as it stands.
Then the ball's collision gets triggered rapidly, making it jitter and swap directions
across the screen at seemingly random.


What does it mean when the ball get's too fast?
The ball's movement is updated across the screen by updating it's position 
every frame by adding values to it's current position. Redrawing the ball's
position in according the movement vectors added at a rapid pace creates
the illusion of movement.
Complications tend to happen when the movement vectors increase to an
unspecified amount.

What does it mean when the ball phases through the walls of the game?
It means that the position of the ball is updated so that in the first
frame, the ball is behind the wall, and then the next frame the ball is behind the wall

What does it mean that the ball's collision gets triggered rapidly?
It means that the ball's collision box does not stop making contact with the walls,
causing it to reverse it's movement over and over again.
---------------------------------------------------------------------------------------
Possible Solution:
Maybe make it so that the collision whenever making contact only triggers the
collision once upon initial collision calculation?
This doesn't work because the root cause is the position still being within bounds
to call it a collision, never escaping collision range.

??Perhaps before every movement tick a future collision is detected,
 I can correct the position of the cube to be hugging in whatever it is in contact
with, that way upon the next frame, the reverse movement will for 
sure move it out of range of collision.

What does it mean before every movement tick a future collision is detected?
We have a condition where as long as a future collision isn't detected, then 
we execute the movement tick with the normal movement vectors as normal.

What does it mean to correct the position of the cube to be hugging in whatever
it is projected to make contact with?
It means that we have to calculate which movement vector to use that upon the next tick,
the border of the colliding wall should be touching the wall pixel perfectly.

What does it mean to execute the movement tick with normal movement vectors as normal?
Then we change to the regular movement vector that the ball was using before.

--------------------------------------------------------------------------------------
How detect a future collision?
--We take the position of the ball before moving and it's offsets, it's 
current movement vector, and the position of the thing it is going to 
collide with.
We add the current position of the ball plus the movement vectors to find it's
future position.
If the future position of the ball goes past the thing it
is going to collide with, then a future collision is detected.
**assuming that the movement vector and position when added no matter
the signs will give the final position

--How do we calculate the movement vector to use upon the next tick 
so that they border each other?
We subtract the future position by the position of the colliding entity.
This is the distance of the future collision position and the
colliding entity.
Then we subtract the current movement vector from the distance of the 
future collision calculated. That is our new movement vector for the next tick.

--------------------------------------------------------------------------------------
NOT NEEDED
How do we update the movement vector with our new tick?
We broadcast a message to update the movement vector with our new values for the 
next tick.

How do we change the movement vector to the movement vector is should
continue in? Continue the new reversed movement vector as normal immediately
overriding the movement vector we calculated on the next tick.














Not possible to fix unless I have control over the order in which things run in, which
is not possible in Scratch. Unfortunate.

I would need to calculate where the ball would move before actually moving it. 
If the ball's future move would go past the collision, then we treat it as if it is
colliding.
Then upon colliding we adjust the movement values.

Put all of this as a part of collision detection and run collision first before running movement.

